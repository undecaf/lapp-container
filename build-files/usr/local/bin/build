#!/bin/sh

#
# Builds the platform (but does not configure it yet)
# ===================================================
#

set -e

. /usr/local/lib/proxy.inc

# Show what is being built
echo $'\n*************** '"Building LAPP container image, tags: $DEPLOY_TAGS, commit: $COMMIT"

# Prepend the build arguments and constants to /etc/environment
E=$(mktemp)
cat - /etc/environment >$E <<EOF
# Build arguments
export MAJOR_VERSION=$MAJOR_VERSION
export DEPLOY_TAGS='$DEPLOY_TAGS'
export BUILD_DATE='${BUILD_DATE:-$(date --utc +'%Y-%m-%dT%H:%M:%SZ')}'

# Build constants
export APACHE_HOME=$APACHE_HOME
export WWW_ROOT=$WWW_ROOT
export PG_ROOT=$PG_ROOT
export UNBOUND_MARKER=$(mktemp -u unbound_XXXXXX)

EOF

mv -f $E /etc/environment
chmod 644 /etc/environment

# Set up the build environment
. /etc/environment

# Install certificates for a caching proxy, if present
# (irrelevant for apk as apk uses HTTP and has additional checksums)
install_proxy_certs

# Add extra repositories
mkdir -p /etc/apk
cat >>/etc/apk/repositories <<EOF
http://dl-cdn.alpinelinux.org/alpine/edge/community
EOF

apk update
apk upgrade

# Build locale support, see https://github.com/Auswaschbar/alpine-localized-docker
export MUSL_LOCPATH="/usr/share/i18n/locales/musl"
MUSL_LOCALES=musl-locales

apk add libintl
apk -q --no-cache --virtual .$MUSL_LOCALES add cmake make musl-dev gcc gettext-dev git
git clone https://gitlab.com/rilian-la-te/$MUSL_LOCALES

cd $MUSL_LOCALES
cmake -DLOCALE_PROFILE=OFF -DCMAKE_INSTALL_PREFIX:PATH=/usr . >/dev/null
make >/dev/null
make install

cd ..
rm -rf $MUSL_LOCALES
apk -q del .$MUSL_LOCALES

# Build bindfs, see https://github.com/mpartel/bindfs, 
# https://github.com/gliderlabs/docker-alpine/issues/268#issuecomment-297043078
BINDFS=bindfs-$BINDFS_VER

apk add fuse
apk -q --no-cache --virtual .$BINDFS add curl git pkgconfig build-base fuse-dev linux-headers
curl -s -L https://bindfs.org/downloads/$BINDFS.tar.gz | tar -xz

cd $BINDFS
./configure >/dev/null
make >/dev/null
make install

cd ..
rm -rf $BINDFS
apk -q del .$BINDFS

# Install the basics
apk add \
	bash \
    su-exec \
    shadow \
    syslog-ng \
	nano \
    git \
    gettext \
	tzdata \
	curl \
	ca-certificates \
	openssl \
    rsync \
    jq \
	pwgen

# Install s6-overlay
curl -s -L https://github.com/just-containers/s6-overlay/releases/download/v${S6_OVERLAY_VER}/s6-overlay-amd64.tar.gz \
    | tar -xz -C /

# Install Apache and PHP
apk add \
	apache2 \
    apache2-ssl \
	php${MAJOR_VERSION} \
	php${MAJOR_VERSION}-apache2 \
	php${MAJOR_VERSION}-phar \
	php${MAJOR_VERSION}-json \
	php${MAJOR_VERSION}-iconv \
	php${MAJOR_VERSION}-openssl

# Install PHP modules
apk add \
    icu-libs \
	imagemagick \
	php${MAJOR_VERSION}-bcmath \
	php${MAJOR_VERSION}-bz2 \
	php${MAJOR_VERSION}-calendar \
	php${MAJOR_VERSION}-ctype \
	php${MAJOR_VERSION}-curl \
	php${MAJOR_VERSION}-dom \
	php${MAJOR_VERSION}-exif \
	php${MAJOR_VERSION}-fileinfo \
	php${MAJOR_VERSION}-ftp \
	php${MAJOR_VERSION}-gd \
	php${MAJOR_VERSION}-gettext \
	php${MAJOR_VERSION}-gmp \
	php${MAJOR_VERSION}-intl \
	php${MAJOR_VERSION}-mbstring \
	php${MAJOR_VERSION}-mysqli \
	php${MAJOR_VERSION}-pcntl \
	php${MAJOR_VERSION}-pdo \
	php${MAJOR_VERSION}-pdo_dblib \
	php${MAJOR_VERSION}-pdo_mysql \
	php${MAJOR_VERSION}-pdo_pgsql \
	php${MAJOR_VERSION}-pdo_sqlite \
	php${MAJOR_VERSION}-pecl-apcu \
	php${MAJOR_VERSION}-pecl-igbinary \
	php${MAJOR_VERSION}-pecl-imagick \
	php${MAJOR_VERSION}-pecl-mcrypt \
	php${MAJOR_VERSION}-pecl-redis \
	php${MAJOR_VERSION}-pecl-xdebug \
	php${MAJOR_VERSION}-posix \
	php${MAJOR_VERSION}-session \
	php${MAJOR_VERSION}-shmop \
	php${MAJOR_VERSION}-simplexml \
	php${MAJOR_VERSION}-soap \
	php${MAJOR_VERSION}-sockets \
	php${MAJOR_VERSION}-sodium \
	php${MAJOR_VERSION}-sqlite3 \
	php${MAJOR_VERSION}-sysvmsg \
	php${MAJOR_VERSION}-sysvsem \
	php${MAJOR_VERSION}-sysvshm \
	php${MAJOR_VERSION}-tokenizer \
	php${MAJOR_VERSION}-xmlreader \
	php${MAJOR_VERSION}-xmlwriter \
	php${MAJOR_VERSION}-xsl \
	php${MAJOR_VERSION}-zip

# Since this system has only one PHP version:
which php || ln -s $(which php${MAJOR_VERSION}) /usr/local/bin/php

# Install Composer
curl -s -S https://getcomposer.org/installer | php
mv composer.phar /usr/local/bin/
ln -s /usr/local/bin/composer.phar /usr/local/bin/composer
chmod 755 /etc/php${MAJOR_VERSION}

# Move document root to $DOCROOT, remove unused directories
mkdir -p $WWW_ROOT $DOCROOT
sed -i "s#/var/www/localhost/htdocs#$DOCROOT#" /etc/apache2/httpd.conf
rm -rf $WWW_ROOT/htdocs $WWW_ROOT/cgi-bin

# Make everything in $APACHE_HOME accessible by Apache
find $APACHE_HOME -type d -exec chmod 755 {} \;
chown -R $APACHE_USER: $APACHE_HOME

# Install database
apk add \
    postgresql

# Leave a marker in $PG_ROOT so that bind mounts can be detected
mkdir -p $PG_ROOT
touch $PG_ROOT/$UNBOUND_MARKER

chmod 755 /usr/local/bin/*
chmod 755 /etc/php${MAJOR_VERSION}

# Clean up (must be the last command in this file)
rm -rf /var/cache/apk/* $0
